package telegram

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"time"
	database "weather-clothing/internal/db"
	"weather-clothing/internal/weather"

	tgbot "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func Bot(db *sql.DB) {
	tgtoken := os.Getenv("TGBOTTOKEN")
	if tgtoken == "" {
		log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
		return
	}

	bot, err := tgbot.NewBotAPI(tgtoken)
	if err != nil {
		log.Println(err)
		return
	}
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ %s", bot.Self.UserName)

	u := tgbot.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		switch update.Message.Text {
		case "/start":
			msg := tgbot.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –ø–æ–≥–æ–¥—É‚òÄÔ∏èüåß, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂—É —Å—Ç–∏–ª–∏üëóüß•")
			bot.Send(msg)
		case "/weather":
			msg := tgbot.NewMessage(update.Message.Chat.ID, "–ü–æ—Å–º–æ—Ç—Ä–∏ –ø–æ–≥–æ–¥—É, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
			bot.Send(msg)

			cityesUpdate := waitForUserResponse(bot, update.Message.Chat.ID)
			if cityesUpdate == nil {
				msg = tgbot.NewMessage(update.Message.Chat.ID, "–ù–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
				bot.Send(msg)
				return
			}

			cityes := cityesUpdate.Message.Text

			city, temp, conditions, pressure, wind_speed, err := weather.WeatherFunc(cityes)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:", err)
				msg = tgbot.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
				bot.Send(msg)
				return
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			if err := database.WriteWeatherHistory(db, city, temp, conditions, pressure, wind_speed); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", err)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
			notification := database.NotificationConditionsPressureWind_speed(db, conditions, pressure, wind_speed)

			// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π
			weatherMsg := fmt.Sprintf("üå§ –ü–æ–≥–æ–¥–∞ –≤ %s:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: %s\n%s",
				city, temp, conditions, notification)

			// –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
			detailedInfo := fmt.Sprintf("üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: %.2f –º/—Å\n‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: %d –≥–ü–∞",
				wind_speed, pressure)

			msg = tgbot.NewMessage(update.Message.Chat.ID, weatherMsg)
			msg.ReplyMarkup = tgbot.NewInlineKeyboardMarkup(
				tgbot.NewInlineKeyboardRow(
					tgbot.NewInlineKeyboardButtonData("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", "show_details"),
				),
			)

			if _, err := bot.Send(msg); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			}

			if update.CallbackQuery != nil {
				if update.CallbackQuery.Data == "show_details" {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
					detailedMsg := tgbot.NewMessage(
						update.CallbackQuery.Message.Chat.ID,
						detailedInfo, // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞
					)

					// –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
					edit := tgbot.NewEditMessageReplyMarkup(
						update.CallbackQuery.Message.Chat.ID,
						update.CallbackQuery.Message.MessageID,
						tgbot.InlineKeyboardMarkup{InlineKeyboard: [][]tgbot.InlineKeyboardButton{}},
					)

					bot.Send(edit)
					bot.Send(detailedMsg)

					// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
					//bot.AnswerCallbackQuery(tgbot.NewCallback(update.CallbackQuery.ID, ""))
				}
			}
		case "/help":
			msg := tgbot.NewMessage(update.Message.Chat.ID, "/start, /weather")
			bot.Send(msg)
		}
	}
}

func waitForUserResponse(bot *tgbot.BotAPI, chatID int64) *tgbot.Update {
	// –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è - 60 —Å–µ–∫—É–Ω–¥
	timeout := time.Now().Add(60 * time.Second)

	for time.Now().Before(timeout) {
		updates, err := bot.GetUpdates(tgbot.NewUpdate(0))
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", err)
			continue
		}

		for _, update := range updates {
			if update.Message != nil && update.Message.Chat.ID == chatID {
				return &update
			}
		}

		time.Sleep(1 * time.Second)
	}

	return nil
}
